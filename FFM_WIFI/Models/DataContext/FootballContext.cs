// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace FFM_WIFI.Models.DataContext
{
    public partial class FootballContext : DbContext
    {
        public FootballContext()
        {
        }

        public FootballContext(DbContextOptions<FootballContext> options)
            : base(options)
        {
        }

        public virtual DbSet<League> League { get; set; }
        public virtual DbSet<Player> Player { get; set; }
        public virtual DbSet<Season> Season { get; set; }
        public virtual DbSet<SeasonLeagueTeamAssignment> SeasonLeagueTeamAssignment { get; set; }
        public virtual DbSet<Team> Team { get; set; }
        public virtual DbSet<TeamPlayerAssignment> TeamPlayerAssignment { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<UserTeam> UserTeam { get; set; }
        public virtual DbSet<UserTeamPerformance> UserTeamPerformance { get; set; }
        public virtual DbSet<Venue> Venue { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=localhost\\sqlexpress;Initial Catalog=WIFI_FootballAPI;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "Latin1_General_CI_AS");

            modelBuilder.Entity<League>(entity =>
            {
                entity.HasKey(e => e.LeaguePk);

                entity.Property(e => e.LeaguePk)
                    .ValueGeneratedNever()
                    .HasColumnName("League_PK");

                entity.Property(e => e.LeagueLogo)
                    .IsRequired()
                    .HasColumnName("League_Logo");

                entity.Property(e => e.LeagueName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("League_Name");
            });

            modelBuilder.Entity<Player>(entity =>
            {
                entity.HasKey(e => e.PlayerPk);

                entity.Property(e => e.PlayerPk)
                    .ValueGeneratedNever()
                    .HasColumnName("Player_PK");

                entity.Property(e => e.PlayerDateOfBirth)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("Player_DateOfBirth");

                entity.Property(e => e.PlayerFirstName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Player_FirstName");

                entity.Property(e => e.PlayerHeight)
                    .HasMaxLength(10)
                    .HasColumnName("Player_Height");

                entity.Property(e => e.PlayerImage)
                    .IsRequired()
                    .HasColumnName("Player_Image");

                entity.Property(e => e.PlayerLastName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Player_LastName");

                entity.Property(e => e.PlayerNationality)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("Player_Nationality");

                entity.Property(e => e.PlayerPosition)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasColumnName("Player_Position");
            });

            modelBuilder.Entity<Season>(entity =>
            {
                entity.HasKey(e => e.SeasonPk);

                entity.Property(e => e.SeasonPk)
                    .ValueGeneratedNever()
                    .HasColumnName("Season_PK");

                entity.Property(e => e.SeasonName)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("Season_Name");
            });

            modelBuilder.Entity<SeasonLeagueTeamAssignment>(entity =>
            {
                entity.HasKey(e => e.SeaLeaTeaPk)
                    .HasName("SeaLeaTea_PK");

                entity.ToTable("SeasonLeagueTeam_Assignment");

                entity.Property(e => e.SeaLeaTeaPk).HasColumnName("SeaLeaTea_PK");

                entity.Property(e => e.SeaLeaTeaLeagueFk).HasColumnName("SeaLeaTea_League_FK");

                entity.Property(e => e.SeaLeaTeaSeasonFk).HasColumnName("SeaLeaTea_Season_FK");

                entity.Property(e => e.SeaLeaTeaTeamFk).HasColumnName("SeaLeaTea_Team_FK");

                entity.HasOne(d => d.SeaLeaTeaLeagueFkNavigation)
                    .WithMany(p => p.SeasonLeagueTeamAssignment)
                    .HasForeignKey(d => d.SeaLeaTeaLeagueFk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SeasonLeagueTeam_Assignment_League");

                entity.HasOne(d => d.SeaLeaTeaSeasonFkNavigation)
                    .WithMany(p => p.SeasonLeagueTeamAssignment)
                    .HasForeignKey(d => d.SeaLeaTeaSeasonFk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SeasonLeagueTeam_Assignment_Season");

                entity.HasOne(d => d.SeaLeaTeaTeamFkNavigation)
                    .WithMany(p => p.SeasonLeagueTeamAssignment)
                    .HasForeignKey(d => d.SeaLeaTeaTeamFk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SeasonLeagueTeam_Assignment_Team");
            });

            modelBuilder.Entity<Team>(entity =>
            {
                entity.HasKey(e => e.TeamPk);

                entity.Property(e => e.TeamPk)
                    .ValueGeneratedNever()
                    .HasColumnName("Team_PK");

                entity.Property(e => e.TeamFounded).HasColumnName("Team_Founded");

                entity.Property(e => e.TeamLogo)
                    .IsRequired()
                    .HasColumnName("Team_Logo");

                entity.Property(e => e.TeamName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Team_Name");

                entity.Property(e => e.TeamVenueFk).HasColumnName("Team_Venue_FK");

                entity.HasOne(d => d.TeamVenueFkNavigation)
                    .WithMany(p => p.Team)
                    .HasForeignKey(d => d.TeamVenueFk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Team_Venue");
            });

            modelBuilder.Entity<TeamPlayerAssignment>(entity =>
            {
                entity.HasKey(e => new { e.TeaPlaTeamFk, e.TeaPlaPlayerFk, e.TeaPlaPlayerRating })
                    .HasName("TeaPla_PK");

                entity.ToTable("TeamPlayer_Assignment");

                entity.Property(e => e.TeaPlaTeamFk).HasColumnName("TeaPla_Team_FK");

                entity.Property(e => e.TeaPlaPlayerFk).HasColumnName("TeaPla_Player_FK");

                entity.Property(e => e.TeaPlaPlayerRating).HasColumnName("TeaPla_PlayerRating");

                entity.HasOne(d => d.TeaPlaPlayerFkNavigation)
                    .WithMany(p => p.TeamPlayerAssignment)
                    .HasForeignKey(d => d.TeaPlaPlayerFk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TeaPla_Player_FK");

                entity.HasOne(d => d.TeaPlaTeamFkNavigation)
                    .WithMany(p => p.TeamPlayerAssignment)
                    .HasForeignKey(d => d.TeaPlaTeamFk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TeaPla_Team_FK");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.HasKey(e => e.UserPk);

                entity.Property(e => e.UserPk).HasColumnName("User_PK");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("User_Name");

                entity.Property(e => e.UserPassword)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("User_Password");
            });

            modelBuilder.Entity<UserTeam>(entity =>
            {
                entity.HasKey(e => e.UserTeamPk);

                entity.Property(e => e.UserTeamPk).HasColumnName("UserTeam_PK");

                entity.Property(e => e.UserTeamAt1).HasColumnName("UserTeam_AT1");

                entity.Property(e => e.UserTeamAt2).HasColumnName("UserTeam_AT2");

                entity.Property(e => e.UserTeamAt3).HasColumnName("UserTeam_AT3");

                entity.Property(e => e.UserTeamAt4).HasColumnName("UserTeam_AT4");

                entity.Property(e => e.UserTeamDf1).HasColumnName("UserTeam_DF1");

                entity.Property(e => e.UserTeamDf2).HasColumnName("UserTeam_DF2");

                entity.Property(e => e.UserTeamDf3).HasColumnName("UserTeam_DF3");

                entity.Property(e => e.UserTeamDf4).HasColumnName("UserTeam_DF4");

                entity.Property(e => e.UserTeamDf5).HasColumnName("UserTeam_DF5");

                entity.Property(e => e.UserTeamGk1).HasColumnName("UserTeam_GK1");

                entity.Property(e => e.UserTeamGk2).HasColumnName("UserTeam_GK2");

                entity.Property(e => e.UserTeamLeague).HasColumnName("UserTeam_League");

                entity.Property(e => e.UserTeamMf1).HasColumnName("UserTeam_MF1");

                entity.Property(e => e.UserTeamMf2).HasColumnName("UserTeam_MF2");

                entity.Property(e => e.UserTeamMf3).HasColumnName("UserTeam_MF3");

                entity.Property(e => e.UserTeamMf4).HasColumnName("UserTeam_MF4");

                entity.Property(e => e.UserTeamMf5).HasColumnName("UserTeam_MF5");

                entity.Property(e => e.UserTeamMf6).HasColumnName("UserTeam_MF6");

                entity.Property(e => e.UserTeamName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("UserTeam_Name");

                entity.Property(e => e.UserTeamNumberPlayers).HasColumnName("UserTeam_NumberPlayers");

                entity.Property(e => e.UserTeamPlayday).HasColumnName("UserTeam_Playday");

                entity.Property(e => e.UserTeamSeason).HasColumnName("UserTeam_Season");

                entity.Property(e => e.UserTeamUserFk).HasColumnName("UserTeam_User_FK");

                entity.HasOne(d => d.UserTeamUserFkNavigation)
                    .WithMany(p => p.UserTeam)
                    .HasForeignKey(d => d.UserTeamUserFk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserTeam_User");
            });

            modelBuilder.Entity<UserTeamPerformance>(entity =>
            {
                entity.HasKey(e => e.UserTeamPerformancePk);

                entity.Property(e => e.UserTeamPerformancePk).HasColumnName("UserTeamPerformance_PK");

                entity.Property(e => e.UserTeamPerformanceAt1).HasColumnName("UserTeamPerformance_AT1");

                entity.Property(e => e.UserTeamPerformanceAt2).HasColumnName("UserTeamPerformance_AT2");

                entity.Property(e => e.UserTeamPerformanceAt3).HasColumnName("UserTeamPerformance_AT3");

                entity.Property(e => e.UserTeamPerformanceAt4).HasColumnName("UserTeamPerformance_AT4");

                entity.Property(e => e.UserTeamPerformanceDf1).HasColumnName("UserTeamPerformance_DF1");

                entity.Property(e => e.UserTeamPerformanceDf2).HasColumnName("UserTeamPerformance_DF2");

                entity.Property(e => e.UserTeamPerformanceDf3).HasColumnName("UserTeamPerformance_DF3");

                entity.Property(e => e.UserTeamPerformanceDf4).HasColumnName("UserTeamPerformance_DF4");

                entity.Property(e => e.UserTeamPerformanceDf5).HasColumnName("UserTeamPerformance_DF5");

                entity.Property(e => e.UserTeamPerformanceGk1).HasColumnName("UserTeamPerformance_GK1");

                entity.Property(e => e.UserTeamPerformanceGk2).HasColumnName("UserTeamPerformance_GK2");

                entity.Property(e => e.UserTeamPerformanceMf1).HasColumnName("UserTeamPerformance_MF1");

                entity.Property(e => e.UserTeamPerformanceMf2).HasColumnName("UserTeamPerformance_MF2");

                entity.Property(e => e.UserTeamPerformanceMf3).HasColumnName("UserTeamPerformance_MF3");

                entity.Property(e => e.UserTeamPerformanceMf4).HasColumnName("UserTeamPerformance_MF4");

                entity.Property(e => e.UserTeamPerformanceMf5).HasColumnName("UserTeamPerformance_MF5");

                entity.Property(e => e.UserTeamPerformanceMf6).HasColumnName("UserTeamPerformance_MF6");

                entity.Property(e => e.UserTeamPerformanceUserTeamFk).HasColumnName("UserTeamPerformance_UserTeam_FK");
            });

            modelBuilder.Entity<Venue>(entity =>
            {
                entity.HasKey(e => e.VenuePk);

                entity.Property(e => e.VenuePk)
                    .ValueGeneratedNever()
                    .HasColumnName("Venue_PK");

                entity.Property(e => e.VenueAddress)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Venue_Address");

                entity.Property(e => e.VenueCapacity).HasColumnName("Venue_Capacity");

                entity.Property(e => e.VenueCity)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Venue_City");

                entity.Property(e => e.VenueImage).HasColumnName("Venue_Image");

                entity.Property(e => e.VenueName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Venue_Name");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}