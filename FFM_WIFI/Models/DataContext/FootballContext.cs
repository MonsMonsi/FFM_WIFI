// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace FFM_WIFI.Models.DataContext
{
    public partial class FootballContext : DbContext
    {
        public FootballContext()
        {
        }

        public FootballContext(DbContextOptions<FootballContext> options)
            : base(options)
        {
        }

        public virtual DbSet<League> League { get; set; }
        public virtual DbSet<Player> Player { get; set; }
        public virtual DbSet<Season> Season { get; set; }
        public virtual DbSet<SeasonLeagueTeamAssignment> SeasonLeagueTeamAssignment { get; set; }
        public virtual DbSet<Team> Team { get; set; }
        public virtual DbSet<TeamPlayerAssignment> TeamPlayerAssignment { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<UserPlayerAssignment> UserPlayerAssignment { get; set; }
        public virtual DbSet<Venue> Venue { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=desktop-1k1ems6;Initial Catalog=WIFI_FootballAPI;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "Latin1_General_CI_AS");

            modelBuilder.Entity<League>(entity =>
            {
                entity.HasKey(e => e.LeaguePk);

                entity.Property(e => e.LeaguePk)
                    .ValueGeneratedNever()
                    .HasColumnName("League_PK");

                entity.Property(e => e.LeagueLogo)
                    .IsRequired()
                    .HasColumnName("League_Logo");

                entity.Property(e => e.LeagueName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("League_Name");
            });

            modelBuilder.Entity<Player>(entity =>
            {
                entity.HasKey(e => e.PlayerPk);

                entity.Property(e => e.PlayerPk)
                    .ValueGeneratedNever()
                    .HasColumnName("Player_PK");

                entity.Property(e => e.PlayerAge).HasColumnName("Player_Age");

                entity.Property(e => e.PlayerDateOfBirth)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("Player_DateOfBirth");

                entity.Property(e => e.PlayerFirstName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Player_FirstName");

                entity.Property(e => e.PlayerHeight)
                    .HasMaxLength(10)
                    .HasColumnName("Player_Height");

                entity.Property(e => e.PlayerImage)
                    .IsRequired()
                    .HasColumnName("Player_Image");

                entity.Property(e => e.PlayerLastName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Player_LastName");

                entity.Property(e => e.PlayerNationality)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("Player_Nationality");

                entity.Property(e => e.PlayerPosition)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasColumnName("Player_Position");
            });

            modelBuilder.Entity<Season>(entity =>
            {
                entity.HasKey(e => e.SeasonPk);

                entity.Property(e => e.SeasonPk)
                    .ValueGeneratedNever()
                    .HasColumnName("Season_PK");

                entity.Property(e => e.SeasonName)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("Season_Name");
            });

            modelBuilder.Entity<SeasonLeagueTeamAssignment>(entity =>
            {
                entity.HasKey(e => e.SeaLeaTeaPk)
                    .HasName("SeaLeaTea_PK");

                entity.ToTable("SeasonLeagueTeam_Assignment");

                entity.Property(e => e.SeaLeaTeaPk).HasColumnName("SeaLeaTea_PK");

                entity.Property(e => e.SeaLeaTeaLeagueFk).HasColumnName("SeaLeaTea_League_FK");

                entity.Property(e => e.SeaLeaTeaSeasonFk).HasColumnName("SeaLeaTea_Season_FK");

                entity.Property(e => e.SeaLeaTeaTeamFk).HasColumnName("SeaLeaTea_Team_FK");

                entity.HasOne(d => d.SeaLeaTeaLeagueFkNavigation)
                    .WithMany(p => p.SeasonLeagueTeamAssignment)
                    .HasForeignKey(d => d.SeaLeaTeaLeagueFk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SeasonLeagueTeam_Assignment_League");

                entity.HasOne(d => d.SeaLeaTeaSeasonFkNavigation)
                    .WithMany(p => p.SeasonLeagueTeamAssignment)
                    .HasForeignKey(d => d.SeaLeaTeaSeasonFk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SeasonLeagueTeam_Assignment_Season");

                entity.HasOne(d => d.SeaLeaTeaTeamFkNavigation)
                    .WithMany(p => p.SeasonLeagueTeamAssignment)
                    .HasForeignKey(d => d.SeaLeaTeaTeamFk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SeasonLeagueTeam_Assignment_Team");
            });

            modelBuilder.Entity<Team>(entity =>
            {
                entity.HasKey(e => e.TeamPk);

                entity.Property(e => e.TeamPk)
                    .ValueGeneratedNever()
                    .HasColumnName("Team_PK");

                entity.Property(e => e.TeamFounded).HasColumnName("Team_Founded");

                entity.Property(e => e.TeamLogo)
                    .IsRequired()
                    .HasColumnName("Team_Logo");

                entity.Property(e => e.TeamName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Team_Name");

                entity.Property(e => e.TeamVenueFk).HasColumnName("Team_Venue_FK");

                entity.HasOne(d => d.TeamVenueFkNavigation)
                    .WithMany(p => p.Team)
                    .HasForeignKey(d => d.TeamVenueFk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Team_Venue");
            });

            modelBuilder.Entity<TeamPlayerAssignment>(entity =>
            {
                entity.HasKey(e => new { e.TeaPlaTeamFk, e.TeaPlaPlayerFk, e.TeaPlaPlayerRating })
                    .HasName("TeaPla_PK");

                entity.ToTable("TeamPlayer_Assignment");

                entity.Property(e => e.TeaPlaTeamFk).HasColumnName("TeaPla_Team_FK");

                entity.Property(e => e.TeaPlaPlayerFk).HasColumnName("TeaPla_Player_FK");

                entity.Property(e => e.TeaPlaPlayerRating).HasColumnName("TeaPla_PlayerRating");

                entity.HasOne(d => d.TeaPlaPlayerFkNavigation)
                    .WithMany(p => p.TeamPlayerAssignment)
                    .HasForeignKey(d => d.TeaPlaPlayerFk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TeaPla_Player_FK");

                entity.HasOne(d => d.TeaPlaTeamFkNavigation)
                    .WithMany(p => p.TeamPlayerAssignment)
                    .HasForeignKey(d => d.TeaPlaTeamFk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TeaPla_Team_FK");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.HasKey(e => e.UserPk);

                entity.Property(e => e.UserPk).HasColumnName("User_PK");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("User_Name");

                entity.Property(e => e.UserPassword)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("User_Password");
            });

            modelBuilder.Entity<UserPlayerAssignment>(entity =>
            {
                entity.HasKey(e => new { e.UsePlaUserFk, e.UsePlaPlayerFk })
                    .HasName("UsePla_PK");

                entity.ToTable("UserPlayer_Assignment");

                entity.Property(e => e.UsePlaUserFk).HasColumnName("UsePla_User_FK");

                entity.Property(e => e.UsePlaPlayerFk).HasColumnName("UsePla_Player_FK");

                entity.HasOne(d => d.UsePlaPlayerFkNavigation)
                    .WithMany(p => p.UserPlayerAssignment)
                    .HasForeignKey(d => d.UsePlaPlayerFk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UsePla_Player_FK");

                entity.HasOne(d => d.UsePlaUserFkNavigation)
                    .WithMany(p => p.UserPlayerAssignment)
                    .HasForeignKey(d => d.UsePlaUserFk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UsePla_User_FK");
            });

            modelBuilder.Entity<Venue>(entity =>
            {
                entity.HasKey(e => e.VenuePk);

                entity.Property(e => e.VenuePk)
                    .ValueGeneratedNever()
                    .HasColumnName("Venue_PK");

                entity.Property(e => e.VenueAddress)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Venue_Address");

                entity.Property(e => e.VenueCapacity).HasColumnName("Venue_Capacity");

                entity.Property(e => e.VenueCity)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Venue_City");

                entity.Property(e => e.VenueImage).HasColumnName("Venue_Image");

                entity.Property(e => e.VenueName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Venue_Name");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}